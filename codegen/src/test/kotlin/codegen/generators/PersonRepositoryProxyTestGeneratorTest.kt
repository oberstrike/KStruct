package codegen.generators

import com.maju.annotations.IConverter
import com.maju.annotations.IRepositoryProxy
import com.maju.annotations.RepositoryProxy
import com.maju.annotations.RepositoryProxyHelper
import com.maju.entities.ConverterEntity
import com.maju.entities.MethodEntity
import com.maju.entities.ParameterEntity
import com.maju.entities.RepositoryEntity
import com.maju.generators.repository.proxy.RepositoryProxyGenerator
import com.maju.utils.*
import com.squareup.kotlinpoet.BOOLEAN
import com.squareup.kotlinpoet.INT
import com.squareup.kotlinpoet.STRING
import com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview
import org.junit.Test
import kotlin.test.assertNotNull

data class Person(val name: String)

data class PersonDTO(val name: String)

@RepositoryProxy(converter = PersonConverter::class)
interface PersonRepository {
    fun findByName(name: String): Person
    fun isDeleted(id: Long): Boolean
    fun save(person: Person): Person
    fun getAll(persons: List<Person>): List<Person>
}

class PersonRepositoryImpl : PersonRepository {
    override fun findByName(name: String): Person {
        return Person(name)
    }

    override fun isDeleted(id: Long): Boolean {
        return true
    }

    override fun save(person: Person): Person {
        return person
    }

    override fun getAll(persons: List<Person>): List<Person> {
        return persons
    }
}

class PersonConverter : IConverter<Person, PersonDTO> {
    override fun convertDTOToModel(dto: PersonDTO): Person {
        return Person(dto.name)
    }

    override fun convertModelToDTO(model: Person): PersonDTO {
        return PersonDTO(model.name)
    }
}


//Generated Class by KStruct Generator
class RepositoryProxyTest(
    private val personRepository: PersonRepository,
    override val converter: PersonConverter
) : IRepositoryProxy<Person, PersonDTO> {

    private val helper = RepositoryProxyHelper(converter)

    //Generated by KStruct Generator
    fun findByName(name: String): PersonDTO = helper.toDTO { personRepository.findByName(name) }

    fun isDeleted(id: Long): Boolean = personRepository.isDeleted(id)

    fun save(person: PersonDTO) = helper.toDTO { personRepository.save(helper.toModel { person }) }

    fun getAll(persons: List<PersonDTO>) = helper.toDTOs { personRepository.getAll(helper.toModels { persons }) }
}


class PersonRepositoryProxyTestGeneratorTest {

    @Test
    fun test() {
        val repository = PersonRepositoryImpl()
        val personConverter = PersonConverter()
        val repositoryProxy = RepositoryProxyTest(repository, personConverter)
        val personDTO = repositoryProxy.findByName("Markus")
        println(personDTO)
        val test = repositoryProxy.save(personDTO)
        println(test)
        val getAll = repositoryProxy.getAll(listOf(personDTO))
        println(getAll)
        assertNotNull(getAll)
        assert(getAll.isNotEmpty())
    }

    @KotlinPoetMetadataPreview
    @Test
    fun generatedTest() {

        val dtoType = PersonDTO::class.toType()
        val modelType = Person::class.toType()

        val personRepositoryType = PersonRepository::class.toType()
        val personConverterType = PersonConverter::class.toType()

        val idParam = ParameterEntity(
            name = "id",
            type = INT.toType()
        )

        val nameParameter = ParameterEntity(
            name = "name",
            type = STRING.toType()
        )

        val testParameter = ParameterEntity(
            name = "test",
            type = STRING.toType()
        )

        val personParam = ParameterEntity(
            name = "person",
            type = dtoType
        )

        val findByNameMethod = MethodEntity(
            "findByName",
            listOf(nameParameter, testParameter),
            dtoType
        )

        val saveMethod = MethodEntity(
            name = "save",
            listOf(personParam),
            dtoType
        )

        val deleteMethod = MethodEntity(
            name = "deleteById",
            parameters = listOf(idParam),
            returnType = BOOLEAN.toType()
        )


        val repositoryProxyEntity = RepositoryEntity(
            type = personRepositoryType,
            methods = listOf(findByNameMethod, saveMethod, deleteMethod),
            converter = ConverterEntity(personConverterType, modelType, dtoType),
            name = "PersonRepositoryProxy",
        )

        val repositoryProxyGenerator = RepositoryProxyGenerator("com.test", repositoryProxyEntity)


        val fileSpec = repositoryProxyGenerator.generate()
        println(fileSpec)

    }


}
