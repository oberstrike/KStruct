package codegen.generators

import codegen.ProxyMethodEntity
import codegen.ProxyParameterEntity
import codegen.RepositoryProxy
import codegen.RepositoryProxyEntity
import codegen.generators.repository.RepositoryProxyGenerator
import codegen.utils.toType
import com.squareup.kotlinpoet.STRING
import com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview
import core.Converter
import core.IConverter
import core.initKStruct
import core.util.AbstractRepositoryProxy
import core.util.IDTO
import core.util.IModel
import org.junit.Test

data class Person(val name: String) : IModel

data class PersonDTO(val name: String) : IDTO

@RepositoryProxy
interface PersonRepository {
    fun findByName(name: String): Person
    fun isDeleted(id: Long): Boolean
    fun save(person: Person): Person
}

class PersonRepositoryImpl : PersonRepository {
    override fun findByName(name: String): Person {
        return Person(name)
    }

    override fun isDeleted(id: Long): Boolean {
        return true
    }

    override fun save(person: Person): Person {
        return person
    }
}

class PersonConverter : IConverter<Person, PersonDTO> {
    override fun convertDTOToModel(dto: PersonDTO): Person {
        return Person(dto.name)
    }

    override fun convertModelToDTO(model: Person): PersonDTO {
        return PersonDTO(model.name)
    }
}

val kConverter = initKStruct {
    add(PersonConverter())
}


//Generated Class by KStruct Generator
class RepositoryProxyTest(
    private val personRepository: PersonRepository,
    override val converter: Converter
) : AbstractRepositoryProxy<Person, PersonDTO>() {

    //Generated by KStruct Generator
    fun findByName(name: String): PersonDTO = toDTO { compute { personRepository.findByName(name) } }

    fun isDeleted(id: Long): Boolean = compute { personRepository.isDeleted(id) }!!

    fun save(person: PersonDTO) = toDTO { compute { personRepository.save( toModel { person }) } }
}


class PersonRepositoryProxyTestGeneratorTest {


    @Test
    fun test() {
        val repository = PersonRepositoryImpl()
        val repositoryProxy = RepositoryProxyTest(repository, kConverter)
        val personDTO = repositoryProxy.findByName("Markus")
        println(personDTO)
        val test = repositoryProxy.save(personDTO)
        println(test)
    }

    @KotlinPoetMetadataPreview
    @Test
    fun generatedTest() {

        val dto = PersonDTO::class.toType()
        val model = Person::class.toType()
        val personRepository = PersonRepository::class.toType()

        val nameParameter = ProxyParameterEntity(
            name = "name",
            type = STRING.toType()
        )

        val testParameter = ProxyParameterEntity(
            name = "test",
            type = STRING.toType()
        )

        val personParam = ProxyParameterEntity(
            name = "person",
            type = dto
        )

        val findByNameMethod = ProxyMethodEntity(
            "findByName",
            listOf(nameParameter, testParameter),
            dto
        )

        val saveMethod = ProxyMethodEntity(
            name = "save",
            listOf(personParam),
            dto
        )


        val repositoryProxyEntity = RepositoryProxyEntity(
            modelClass = model,
            dtoClass = dto,
            type = personRepository,
            listOf(findByNameMethod, saveMethod)
        )

        val repositoryProxyGenerator = RepositoryProxyGenerator(repositoryProxyEntity)


        val fileSpec = repositoryProxyGenerator.generate()
        println(fileSpec.toString())


    }


}
